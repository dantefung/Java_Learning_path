package com.dantefung.spi;
/**
 *
 * SPI全称Service Provider Interface
 *
 * 在Java中还是一个比较重要的概念，是Java提供的一套用来被第三方实现或者扩展的API，或者换句话说，SPI是一种服务发现机制。
 *
 * JDK SPI使用说明及示例
 *
 * 要使用SPI比较简单，只需要按照以下几个步骤操作即可：
 *
 * 在jar包的META-INF/services目录下创建一个以"接口全限定名"为命名的文件，内容为实现类的全限定名
 *
 * 接口实现类所在的jar包在classpath下
 *
 * 主程序通过java.util.ServiceLoader动态状态实现模块，它通过扫描META-INF/services目录下的配置文件找到实现类的全限定名，把类加载到JVM
 *
 * SPI的实现类必须带一个无参构造方法
 *
 *  对SPI的理解:
 *
 * JDK SPI，也就是说SPI并不是JDK专属的。
 *
 * 是的，我理解的SPI其实是一种可插拔技术的总称，最简单的例子就是USB，厂商提供了USB的标准，厂家根据USB的标准制造自己的外设，
 *
 * 例如鼠标、键盘、游戏手柄等等，但是USB标准具体在电脑中是怎么用的，厂家就不需要管了。
 *
 * 回到我们的代码中也是一样的道理。当我们开发一个框架的时候，除了保证基本的功能外，最重要的一个点是什么？
 *
 * 我认为最重要的应该是松耦合，即对扩展开放、对修改关闭，保证框架实现对于使用者来说是黑盒。
 *
 * 框架不可能做好所有的事情，只能把共性的部分抽离出来进行流程化，松耦合实现的核心就是定义好足够松散的接口，
 *
 * 或者可以理解是扩展点，具体的扩展点让使用者去实现，这样不同的扩展就不需要修改源代码或者对框架进行定制，这就是面向接口编程的好处。
 *
 * 回到我们框架的部分来说：
 *
 * JDK对于SPI的实现是通过META-INF/services这个目录 + ServiceLoader
 *
 * Spring实现SPI的方式是留了N多的接口，例如BeanPostProcessor、InitializingBean、DisposableBean，我们只需要实现这些接口然后注入即可
 *
 * 对已有框架而言，我们可以通过框架给我们提供的扩展点扩展框架功能。对自己写框架而言，记得SPI这个事情，留好足够的扩展点，这将大大加强你写的框架的扩展性。
 */