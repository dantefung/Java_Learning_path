<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.dantefung</groupId>
    <artifactId>solon-kernel-codebase</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <properties>
        <poi.version>3.13</poi.version>
        <common.io.version>2.5</common.io.version>
        <hutool.version>4.5.6</hutool.version>
        <jacob.version>1.14.3</jacob.version>
        <httpclient.version>4.4.1</httpclient.version>
        <jdom.version>2.0.5</jdom.version>
        <dom4j.version>1.6.1</dom4j.version>
        <javamail.version>1.6.2</javamail.version>
        <org.json.version>20150729</org.json.version>
        <jodconverter.version>2.2.1</jodconverter.version>
        <junit.version>4.11</junit.version>
        <springsource.httpclient.version>3.1.0</springsource.httpclient.version>
        <mysql.version>8.0.17</mysql.version>
        <auto.service.version>1.0-rc4</auto.service.version>
        <javapoet.version>1.11.1</javapoet.version>
    </properties>

    <dependencies>

        <!---->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
            <version>${hutool.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${common.io.version}</version>
        </dependency>

        <!--EXCEL导入导出相关 START-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>${poi.version}</version>
        </dependency>
        <!--EXCEL导入导出相关 END-->

        <!--
        JACOB is a JAVA-COM Bridge that allows you to call COM Automation components from Java.
        It uses JNI to make native calls to the COM libraries.
        JACOB runs on x86 and x64 environments supporting 32 bit and 64 bit JVMs.
        -->
        <dependency>
            <groupId>net.sf.jacob-project</groupId>
            <artifactId>jacob</artifactId>
            <version>${jacob.version}</version>
        </dependency>

        <!--Apache HTTP 客户端-->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${httpclient.version}</version>
        </dependency>

        <!--spring 的httpclient-->
        <!-- https://mvnrepository.com/artifact/org.apache.commons/com.springsource.org.apache.commons.httpclient -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>com.springsource.org.apache.commons.httpclient</artifactId>
            <version>${springsource.httpclient.version}</version>
        </dependency>

        <!--
            XML 解析工具Jdom
        -->
        <dependency>
            <groupId>org.jdom</groupId>
            <artifactId>jdom2</artifactId>
            <version>${jdom.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/dom4j/dom4j -->
        <dependency>
            <groupId>dom4j</groupId>
            <artifactId>dom4j</artifactId>
            <version>${dom4j.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/javax.mail/javax.mail-api -->
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <version>${javamail.version}</version>
        </dependency>


        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
            <version>${org.json.version}</version>
        </dependency>

        <!--
            JODConverter converts between different office documents formats, using OpenOffice.org.
        -->
        <dependency>
            <groupId>com.artofsolving</groupId>
            <artifactId>jodconverter</artifactId>
            <version>${jodconverter.version}</version>
        </dependency>


        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>

        <!--
            A configuration/metadata generator for java.util.ServiceLoader-style service providers
            AutoWhat?
                Java annotation processors and other systems use java.util.ServiceLoader to register implementations of well-known types
                using META-INF metadata. However, it is easy for a developer to forget to update or correctly specify the service descriptors.
                AutoService generates this metadata for the developer, for any class annotated with @AutoService,
                avoiding typos, providing resistance to errors from refactoring, etc.
            自动帮你生成META-INF/services下的SPI要求的配置文件
        -->
        <dependency>
            <groupId>com.google.auto.service</groupId>
            <artifactId>auto-service</artifactId>
            <version>${auto.service.version}</version>
            <optional>true</optional>
        </dependency>
        <!--
        com.squareup:javapoet:1.11.1
        到此为止，我们唯一剩余的需求就是生成ShapeFactory类了。上一节中我们在FactoryProcessor类的init(ProcessingEnvironment processingEnvironment)方法中通过
        processingEnvironment拿到了Filer，并且我们也提到通过Filer可以用来编写文件，即可以通过Filer来生成我们所需要的ShapeFactory类。
        但是，直接使用Filer需要我们手动拼接类的代码，很可能一不小心写错了一个字母就致使所生成的类是无效的。
        因此，我们需要来认识一下JavaPoet这个库。 JavaPoet是square公司的一个开源框架JavaPoet，由Jake Wharton大神所编写。
        JavaPoet可以用对象的方式来帮助我们生成类代码，也就是我们能只要把要生成的类文件包装成一个对象，JavaPoet便可以自动帮我们生成类文件了。
        -->
        <dependency>
            <groupId> com.squareup</groupId>
            <artifactId>javapoet</artifactId>
            <version>${javapoet.version}</version>
            <optional>true</optional>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>7</source>
                    <target>7</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.mysema.maven</groupId>
                <artifactId>apt-maven-plugin</artifactId>
                <version>1.1.3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>process</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>target/generated-sources/java</outputDirectory>
                            <processor>com.dantefung.annotation.apt.shape.factorycompiler.processor.FactoryProcessor</processor>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
